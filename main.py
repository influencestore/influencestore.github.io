import logging
import os
import io
import time
import tempfile
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.error import TimedOut, NetworkError, TelegramError
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from PIL import Image, ImageDraw, ImageFilter, ImageEnhance, ImageFont
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–µ—Ç–∏
async def retry_telegram_request(func, *args, max_retries=3, initial_delay=1, **kwargs):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–µ—Ç–∏.
    
    Args:
        func: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        *args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        initial_delay: –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        **kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏
    """
    retries = 0
    delay = initial_delay
    
    while retries <= max_retries:
        try:
            return await func(*args, **kwargs)
        except (TimedOut, NetworkError) as e:
            retries += 1
            if retries > max_retries:
                logging.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {e}")
                raise
            
            logging.warning(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {retries}/{max_retries}): {e}")
            logging.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
            
            await asyncio.sleep(delay)
            # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–ª—É—á–∞–π–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
            delay = delay * 2

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
TOKEN = '8131594462:AAEoRFyev7tBQ4PM8zvXmN0sLILRyg2WRNM'

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
STATE_WAITING_FOR_AF_CLASSIC_LINK = 'waiting_for_af_classic_link'
STATE_WAITING_FOR_AF_QUICK_LINK = 'waiting_for_af_quick_link'
STATE_WAITING_FOR_FP_CLASSIC_LINK = 'waiting_for_fp_classic_link'
STATE_WAITING_FOR_FP_REGION_ERROR_LINK = 'waiting_for_fp_region_error_link'
STATE_WAITING_FOR_WANMEI_ID = 'waiting_for_wanmei_id'
STATE_WAITING_FOR_QR_FRIEND_LINK = 'waiting_for_qr_friend_link'
STATE_WAITING_FOR_QR_FRIEND_TIMESTAMP = 'waiting_for_qr_friend_timestamp'
STATE_WAITING_FOR_CS2_CODE_FAKE_LINK = 'waiting_for_cs2_code_fake_link'  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π Ban MM
STATE_WAITING_FOR_BAN_30MIN_PHOTO = 'waiting_for_ban_30min_photo'
STATE_WAITING_FOR_BAN_1HOUR_PHOTO = 'waiting_for_ban_1hour_photo'
STATE_WAITING_FOR_BAN_2HOURS_PHOTO = 'waiting_for_ban_2hours_photo'
STATE_WAITING_FOR_BAN_24HOURS_PHOTO = 'waiting_for_ban_24hours_photo'
STATE_WAITING_FOR_BAN_7DAYS_PHOTO = 'waiting_for_ban_7days_photo'

# Add this constant with other states
STATE_WAITING_FOR_CS2_CODE_NOT_FOUND_LINK = 'waiting_for_cs2_code_not_found_link'

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üë• Add Friend", callback_data='add_friend'),
         InlineKeyboardButton("‚ö†Ô∏è Ban MM", callback_data='ban_mm')],
        [InlineKeyboardButton("üîé Friend Page", callback_data='friend_page'),
         InlineKeyboardButton("üîë CS2 Code", callback_data='cs2_code')],
        [InlineKeyboardButton("üé´ QR Friend Page", callback_data='qr_friend'),
         InlineKeyboardButton("üö´ –û—à–∏–±–∫–∞ Wanmei", callback_data='wanmei_error')],
        [InlineKeyboardButton("‚ö™Ô∏è DOBIV BY A777MP", callback_data='dobiv_by_a777mp'),
         InlineKeyboardButton("üí¨ –ö—É–ø–∏—Ç—å WECHAT/QQ", callback_data='buy_wechat_qq')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = "üëã –ü—Ä–∏–≤–µ—Ç, –≤–æ—Ä–∫–µ—Ä! –≠—Ç–æ —Ç–≤–æ–π –º—É–ª—å—Ç–∏-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–æ—Ä–∫–∞!\n\n" \
               "üìç –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º!\n" \
               "‚ù§Ô∏è [–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞](https://t.me/send?start=IVufKXTbCfU1)"
                   
    
    await retry_telegram_request(
        update.message.reply_text,
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown',
        disable_web_page_preview=True
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    has_text = hasattr(query.message, 'text') and query.message.text
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞
    async def safe_edit_message(message_text, reply_markup, parse_mode=None, disable_web_page_preview=None):
        if has_text:
            try:
                await retry_telegram_request(
                    query.message.edit_text,
                    message_text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode,
                    disable_web_page_preview=disable_web_page_preview
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await retry_telegram_request(
                    query.message.reply_text,
                    message_text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode,
                    disable_web_page_preview=disable_web_page_preview
                )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —Ñ–æ—Ç–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await retry_telegram_request(
                query.message.reply_text,
                message_text,
                reply_markup=reply_markup,
                parse_mode=parse_mode,
                disable_web_page_preview=disable_web_page_preview
            )
    
    if query.data == 'add_friend':
        keyboard = [
            [InlineKeyboardButton("üìù AF Classic", callback_data='af_classic'),
             InlineKeyboardButton("‚ö°Ô∏è AF Quick Link", callback_data='af_quick_link')],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await safe_edit_message("üí´ –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ!", reply_markup)
    elif query.data == 'af_classic':
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_add_friend')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await safe_edit_message("üîó –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –º–∞–º–æ–Ω—Ç–∞:", reply_markup)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
        user_id = query.from_user.id
        user_states[user_id] = STATE_WAITING_FOR_AF_CLASSIC_LINK
    elif query.data == 'af_quick_link':
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_add_friend')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await safe_edit_message("üîó –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –º–∞–º–æ–Ω—Ç–∞:", reply_markup)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
        user_id = query.from_user.id
        user_states[user_id] = STATE_WAITING_FOR_AF_QUICK_LINK
    elif query.data == 'back_to_add_friend':
        keyboard = [
            [InlineKeyboardButton("üìù AF Classic", callback_data='af_classic'),
             InlineKeyboardButton("‚ö°Ô∏è AF Quick Link", callback_data='af_quick_link')],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await safe_edit_message("üí´ –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ!", reply_markup)
    elif query.data == 'back_to_main':
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text –≤–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ start, —Ç–∞–∫ –∫–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å callback_query
        keyboard = [
            [InlineKeyboardButton("üë• Add Friend", callback_data='add_friend'),
             InlineKeyboardButton("‚ö†Ô∏è Ban MM", callback_data='ban_mm')],
            [InlineKeyboardButton("üîé Friend Page", callback_data='friend_page'),
             InlineKeyboardButton("üîë CS2 Code", callback_data='cs2_code')],
            [InlineKeyboardButton("üé´ QR Friend Page", callback_data='qr_friend'),
             InlineKeyboardButton("üö´ –û—à–∏–±–∫–∞ Wanmei", callback_data='wanmei_error')],
            [InlineKeyboardButton("‚ö™Ô∏è DOBIV BY A777MP", callback_data='dobiv_by_a777mp'),
             InlineKeyboardButton("üí¨ –ö—É–ø–∏—Ç—å WECHAT/QQ", callback_data='buy_wechat_qq')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = "üëã –ü—Ä–∏–≤–µ—Ç, –≤–æ—Ä–∫–µ—Ä! –≠—Ç–æ —Ç–≤–æ–π –º—É–ª—å—Ç–∏-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–æ—Ä–∫–∞!\n\n" \
                       "üìç –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º!\n" \
                       "‚ù§Ô∏è [–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞](https://t.me/send?start=IVufKXTbCfU1)\n" 
       
        
        await safe_edit_message(welcome_text, reply_markup, parse_mode='Markdown', disable_web_page_preview=True)
    elif query.data == 'ban_mm':
        keyboard = [
            [InlineKeyboardButton("‚è± 30 –º–∏–Ω—É—Ç", callback_data='ban_30min'),
             InlineKeyboardButton("‚è± 1 —á–∞—Å", callback_data='ban_1hour')],
            [InlineKeyboardButton("‚è± 2 —á–∞—Å–∞", callback_data='ban_2hours'),
             InlineKeyboardButton("‚è± 24 —á–∞—Å–∞", callback_data='ban_24hours')],
            [InlineKeyboardButton("‚è± 7 –¥–Ω–µ–π", callback_data='ban_7days')],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        warning_text = "‚ö†Ô∏è Ban MM\nüîí –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–∞–Ω–∞ –≤ MM\n\n‚ùóÔ∏è CS2 –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 16:9\n\nüìå –í—ã–±–µ—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–≤–æ–µ–≥–æ —Ñ–µ–π–∫–æ–≤–æ–≥–æ –±–∞–Ω–∞!"
        await safe_edit_message(warning_text, reply_markup)
    elif query.data == 'friend_page':
        keyboard = [
            [InlineKeyboardButton("üìù FP Classic", callback_data='fp_classic')],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await safe_edit_message("üí´ –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ!", reply_markup)
    elif query.data == 'fp_classic':
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_friend_page')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message_text = "üí´ –û—Ç–ø—Ä–∞–≤—å fake-invite —Å—Å—ã–ª–∫—É:\n\n‚ùóÔ∏è –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ—Ç—Ä–∏—Å–æ–≤—â–∏–∫–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–π–¥–∏—Ç–µ —Å–∞–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É –∏ —Å–ª–µ–¥–æ–º —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"
        await safe_edit_message(message_text, reply_markup)
    
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
        user_id = query.from_user.id
        user_states[user_id] = STATE_WAITING_FOR_FP_CLASSIC_LINK
    elif query.data == 'fp_region_error':
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_friend_page')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message_text = "üí´ –û—Ç–ø—Ä–∞–≤—å fake-invite —Å—Å—ã–ª–∫—É:\n\n‚ùóÔ∏è –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ—Ç—Ä–∏—Å–æ–≤—â–∏–∫–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–π–¥–∏—Ç–µ —Å–∞–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É –∏ —Å–ª–µ–¥–æ–º —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"
        await safe_edit_message(message_text, reply_markup)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
        user_id = query.from_user.id
        user_states[user_id] = STATE_WAITING_FOR_FP_REGION_ERROR_LINK
    elif query.data == 'back_to_friend_page':
        keyboard = [
            [InlineKeyboardButton("üìù FP Classic", callback_data='fp_classic'),
             InlineKeyboardButton("üåê FP Region Error", callback_data='fp_region_error')],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await safe_edit_message("üí´ –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ!", reply_markup)
    elif query.data == 'cs2_code':
        keyboard = [
            [InlineKeyboardButton("üîê CS2 Code Fake", callback_data='cs2_code_fake'),
             InlineKeyboardButton("‚õ≥Ô∏è CS2 Code Not Found", callback_data='cs2_code_not_found')],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await safe_edit_message(
            "üîê CS2 Code Fake\n"
            "          ‚ï∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–æ–¥–∞ CS2\n"
            "‚õ≥Ô∏è CS2 Code Not Found\n"
            "           ‚ï∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –º–∞–º–æ–Ω—Ç–∞\n\n"
            "üéØ –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ!", 
            reply_markup
        )
    
    elif query.data == 'cs2_code_fake':
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_cs2_code')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message_text = "üëÄ –û—Ç–ø—Ä–∞–≤—å fake-invite —Å—Å—ã–ª–∫—É:\n\n‚ùóÔ∏è –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ—Ç—Ä–∏—Å–æ–≤—â–∏–∫–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–π–¥–∏—Ç–µ —Å–∞–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É –∏ —Å–ª–µ–¥–æ–º —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n\n‚ùóÔ∏è –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ç–∞–∫ –≤—Å–µ–≥–¥–∞, –∏–±–æ –∫–ª–æ–∞–∫–∞ ‚Äî –≤–µ—â—å –Ω–µ—É–¥–æ–±–Ω–∞—è"
        await safe_edit_message(message_text, reply_markup)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
        user_id = query.from_user.id
        user_states[user_id] = STATE_WAITING_FOR_CS2_CODE_FAKE_LINK
    
    elif query.data == 'back_to_cs2_code':
        keyboard = [
            [InlineKeyboardButton("üîê CS2 Code Fake", callback_data='cs2_code_fake'),
             InlineKeyboardButton("‚õ≥Ô∏è CS2 Code Not Found", callback_data='cs2_code_not_found')],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await safe_edit_message(
            "üîê CS2 Code Fake\n"
            "          ‚ï∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–æ–¥–∞ CS2\n"
            "‚õ≥Ô∏è CS2 Code Not Found\n"
            "           ‚ï∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –º–∞–º–æ–Ω—Ç–∞\n\n"
            "üéØ –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ!", 
            reply_markup
        )
    
    # Modify the cs2_code_not_found handler in button_callback function
    elif query.data == 'cs2_code_not_found':
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_cs2_code')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message_text = "üëÄ –û—Ç–ø—Ä–∞–≤—å fake-invite —Å—Å—ã–ª–∫—É:\n\n‚ùóÔ∏è –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ—Ç—Ä–∏—Å–æ–≤—â–∏–∫–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–π–¥–∏—Ç–µ —Å–∞–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É –∏ —Å–ª–µ–¥–æ–º —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n\n‚ùóÔ∏è –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ç–∞–∫ –≤—Å–µ–≥–¥–∞, –∏–±–æ –∫–ª–æ–∞–∫–∞ ‚Äî –≤–µ—â—å –Ω–µ—É–¥–æ–±–Ω–∞—è"
        await safe_edit_message(message_text, reply_markup)
        
        # Set user state
        user_id = query.from_user.id
        user_states[user_id] = STATE_WAITING_FOR_CS2_CODE_NOT_FOUND_LINK
    elif query.data == 'qr_friend':
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message_text = "üé´ QR Friend Page\nüìù –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ QR-–∫–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥—Ä—É–∑–µ–π —Å —Ç–≤–æ–∏–º —Ñ–µ–π–∫–æ–º\n\nüí´ –û—Ç–ø—Ä–∞–≤—å fake-invite —Å—Å—ã–ª–∫—É:\n\n‚ùóÔ∏è –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ—Ç—Ä–∏—Å–æ–≤—â–∏–∫–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–π–¥–∏—Ç–µ —Å–∞–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É –∏ —Å–ª–µ–¥–æ–º —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n\n‚ùóÔ∏è –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ç–∞–∫ –≤—Å–µ–≥–¥–∞, –∏–±–æ –∫–ª–æ–∞–∫–∞ ‚Äî –≤–µ—â—å –Ω–µ—É–¥–æ–±–Ω–∞—è"
        await safe_edit_message(message_text, reply_markup)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
        user_id = query.from_user.id
        user_states[user_id] = STATE_WAITING_FOR_QR_FRIEND_LINK
        print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {STATE_WAITING_FOR_QR_FRIEND_LINK} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    elif query.data == 'wanmei_error':
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞ Wanmei\nüîí –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ ID –º–∞–º–æ–Ω—Ç–∞ –≤ –º–µ–Ω—é\n\nüì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –º–∞–º–æ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:"
        await safe_edit_message(message_text, reply_markup)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è ID –º–∞–º–æ–Ω—Ç–∞
        user_id = query.from_user.id
        user_states[user_id] = STATE_WAITING_FOR_WANMEI_ID
    elif query.data == 'dobiv_by_a777mp':
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        dobiv_text = "*–°—Ç–∞—Ç–∏—á–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É - 10%*\n\n" \
                   "*–î–æ–±–∏–≤ —á–µ—Ä–µ–∑ Wechat/Telegram - 15%*\n\n" \
                   "*–†–∞–±–æ—Ç–∞–µ–º –ø–æ –ª—é–±–æ–º—É –ì–ï–û*\n\n" \
                   "*–£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ–±–∏–≤–∞*\n\n" \
                   "*–ß–∏—Å—Ç–∏–º –∫–∞—Ä—Ç—ã/–∫–æ—à–µ–ª—å–∫–∏(70/30% –≤–∞—à–∏)*\n\n" \
                   "*–í–°–ï –î–û–ë–ò–¢–´–ï –°–ï–°–°–ò–ò –í–´ –ú–û–ñ–ï–¢–ï –ü–û–°–ú–û–¢–†–ï–¢–¨* [–¢–£–¢](https://t.me/a777mpdobiv) \n\n" \
                   "*–¢–ï–ú–ê* [ZELENKA](https://lolz.live/threads/8355679)\n\n" \
                   "*–¢–ï–ú–ê* [YOUHACK](https://youhack.top/threads/940448)\n\n" \
                   "*–ö–æ–Ω—Ç–∞–∫—Ç : @dobiv178*"
        await safe_edit_message(dobiv_text, reply_markup, parse_mode='Markdown', disable_web_page_preview=True)
    elif query.data == 'buy_wechat_qq':
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text("üí¨ –î–ª—è –ø–æ–∫—É–ø–∫–∏ WECHAT/QQ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @mynameisblood", reply_markup=reply_markup)
    # –£–¥–∞–ª–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    elif query.data in ['ban_30min', 'ban_1hour', 'ban_2hours', 'ban_24hours', 'ban_7days']:
        ban_times = {
            'ban_30min': '30 –º–∏–Ω—É—Ç',
            'ban_1hour': '1 —á–∞—Å',
            'ban_2hours': '2 —á–∞—Å–∞',
            'ban_24hours': '24 —á–∞—Å–∞',
            'ban_7days': '7 –¥–Ω–µ–π'
        }
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±–∞–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        ban_states = {
            'ban_30min': STATE_WAITING_FOR_BAN_30MIN_PHOTO,
            'ban_1hour': STATE_WAITING_FOR_BAN_1HOUR_PHOTO,
            'ban_2hours': STATE_WAITING_FOR_BAN_2HOURS_PHOTO,
            'ban_24hours': STATE_WAITING_FOR_BAN_24HOURS_PHOTO,
            'ban_7days': STATE_WAITING_FOR_BAN_7DAYS_PHOTO
        }
        user_states[user_id] = ban_states[query.data]
        
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message_text = f"üì± –û—Ç–ø—Ä–∞–≤—å –§–ê–ô–õ–û–ú –ø–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ –º–µ–Ω—é CS2 –¥–ª—è –±–∞–Ω–∞ –Ω–∞ {ban_times[query.data]}\n\n‚ùóÔ∏è –£–±–µ—Ä–∏ –≥–∞–ª–∫—É –≤ –ø—É–Ω–∫—Ç–µ \"–°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\" –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"
        await query.message.edit_text(message_text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
# –í —Ñ—É–Ω–∫—Ü–∏–∏ handle_message –¥–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –∫–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR Friend Page —Å—Å—ã–ª–æ–∫
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if update.message.photo and user_id in user_states:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è Ban MM
        ban_states = [
            STATE_WAITING_FOR_BAN_30MIN_PHOTO,
            STATE_WAITING_FOR_BAN_1HOUR_PHOTO,
            STATE_WAITING_FOR_BAN_2HOURS_PHOTO,
            STATE_WAITING_FOR_BAN_24HOURS_PHOTO,
            STATE_WAITING_FOR_BAN_7DAYS_PHOTO
        ]
        
        if user_states[user_id] in ban_states:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_state = user_states[user_id]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–Ω–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
            ban_type_map = {
                STATE_WAITING_FOR_BAN_30MIN_PHOTO: 'ban_30min',
                STATE_WAITING_FOR_BAN_1HOUR_PHOTO: 'ban_1hour',
                STATE_WAITING_FOR_BAN_2HOURS_PHOTO: 'ban_2hours',
                STATE_WAITING_FOR_BAN_24HOURS_PHOTO: 'ban_24hours',
                STATE_WAITING_FOR_BAN_7DAYS_PHOTO: 'ban_7days'
            }
            ban_type = ban_type_map[current_state]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = await retry_telegram_request(
                update.message.reply_text,
                "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            )
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                photo_file = await retry_telegram_request(
                    update.message.photo[-1].get_file
                )
                photo_bytes = await retry_telegram_request(
                    photo_file.download_as_bytearray
                )
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img = Image.open(io.BytesIO(photo_bytes))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∂–µ–ª—Ç—É—é –ø–æ–ª–æ—Å–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º
                img_with_strip = add_ban_yellow_strip(img, ban_type)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_file:
                    img_with_strip.save(temp_file, format='PNG')
                    screenshot_path = temp_file.name
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                with open(screenshot_path, 'rb') as photo:
                    await retry_telegram_request(
                        update.message.reply_photo,
                        photo=photo,
                        caption="‚úÖ –ë–∞–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞", url='https://t.me/send?start=IVufKXTbCfU1')],
                            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
                        ])
                    )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(screenshot_path)
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
                await retry_telegram_request(
                    update.message.reply_text,
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
                    ])
                )
            
            finally:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                try:
                    await retry_telegram_request(processing_message.delete)
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                del user_states[user_id]
            
            return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ–±—Ä–∞–±—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not hasattr(update.message, 'text'):
        return
    
    message_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã ID –º–∞–º–æ–Ω—Ç–∞ –¥–ª—è –æ—à–∏–±–∫–∏ Wanmei
    if user_id in user_states and user_states[user_id] == STATE_WAITING_FOR_WANMEI_ID:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_message = await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ Wanmei...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –º–∞–º–æ–Ω—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            mammoth_id = message_text.strip()
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            from temp_functions import create_wanmei_error_screenshot
            
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –æ—à–∏–±–∫–æ–π Wanmei –∏ ID –º–∞–º–æ–Ω—Ç–∞
            screenshot_path = await create_wanmei_error_screenshot(mammoth_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            if screenshot_path:
                with open(screenshot_path, 'rb') as photo:
                    await update.message.reply_photo(
                        photo=photo,
                        caption="‚úÖ –û—à–∏–±–∫–∞ Wanmei —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞", url='https://t.me/send?start=IVufKXTbCfU1')],
                            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
                        ])
                    )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(screenshot_path)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ Wanmei. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
                    ])
                )
        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ—à–∏–±–∫–∏ Wanmei: {e}")
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –º–∞–º–æ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
                ])
            )
        
        finally:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_message.delete()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_states[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Å—Å—ã–ª–∫—É –¥–ª—è CS2 Code Fake
    elif user_id in user_states and user_states[user_id] == STATE_WAITING_FOR_CS2_CODE_FAKE_LINK:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É
        if message_text.startswith('http'):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é CS2 Code Fake...")
            
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CS2 Code Fake
                from temp_functions import create_cs2_code_fake
                
                # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ CS2 Code Fake —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π
                screenshot_path = await create_cs2_code_fake(message_text)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                if screenshot_path:
                    with open(screenshot_path, 'rb') as photo:
                        await update.message.reply_photo(
                            photo=photo,
                            caption="‚úÖ CS2 Code Fake —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞", url='https://t.me/send?start=IVufKXTbCfU1')],
                                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_cs2_code')]
                            ])
                        )
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.unlink(screenshot_path)
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å CS2 Code Fake. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_cs2_code')]
                        ])
                    )
            
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CS2 Code Fake: {e}")
                await update.message.reply_text(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_cs2_code')]
                    ])
                )
            
            finally:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                try:
                    await retry_telegram_request(processing_message.delete)
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                del user_states[user_id]
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É
            await update.message.reply_text(
                "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Steam.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_cs2_code')]
                ])
            )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Å—Å—ã–ª–∫—É –¥–ª—è QR Friend Page
    elif user_id in user_states and user_states[user_id] == STATE_WAITING_FOR_QR_FRIEND_LINK:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É
        if message_text.startswith('http'):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not hasattr(context, 'user_data'):
                context.user_data = {}
            context.user_data[user_id] = {'qr_friend_link': message_text}
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            await update.message.reply_text(
                "‚åöÔ∏è –û—Ç–ø—Ä–∞–≤—å –≤—Ä–µ–º—è —É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:\n\n‚ùóÔ∏è –ü—Ä–∏–º–µ—Ä: 4:20",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
                ])
            )
            
            # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            user_states[user_id] = STATE_WAITING_FOR_QR_FRIEND_TIMESTAMP
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É
            await update.message.reply_text(
                "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Steam.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
                ])
            )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤—Ä–µ–º—è –¥–ª—è QR Friend Page
    elif user_id in user_states and user_states[user_id] == STATE_WAITING_FOR_QR_FRIEND_TIMESTAMP:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_message = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
            profile_url = context.user_data[user_id]['qr_friend_link']
            timestamp = message_text  # –í—Ä–µ–º—è, –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            from temp_functions import add_ban_yellow_strip, create_region_error_screenshot, create_qr_friend_page
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR Friend Page —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
            screenshot_path = await create_qr_friend_page(profile_url, timestamp)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            if screenshot_path:
                with open(screenshot_path, 'rb') as photo:
                    await update.message.reply_photo(
                        photo=photo,
                        caption="‚úÖ QR Friend Page —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞", url='https://t.me/send?start=IVufKXTbCfU1')],
                            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
                        ])
                    )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(screenshot_path)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å QR Friend Page. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
                    ])
                )
        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ QR Friend Page: {e}")
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
                ])
            )
        
        finally:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_message.delete()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in user_states:
                del user_states[user_id]
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if hasattr(context, 'user_data') and user_id in context.user_data:
                del context.user_data[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Å—Å—ã–ª–∫—É –¥–ª—è AF Classic –∏–ª–∏ AF Quick Link
    if user_id in user_states and user_states[user_id] in [STATE_WAITING_FOR_AF_CLASSIC_LINK, STATE_WAITING_FOR_AF_QUICK_LINK]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É
        if message_text.startswith('http'):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            
            try:
                # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏
                # –í–º–µ—Å—Ç–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ URL, –ø–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
                is_quick_link = user_states[user_id] == STATE_WAITING_FOR_AF_QUICK_LINK
                screenshot_paths = await create_steam_screenshot(message_text, is_quick_link)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                if screenshot_paths and len(screenshot_paths) > 0:
                    with open(screenshot_paths[0], 'rb') as photo:
                        await update.message.reply_photo(
                            photo=photo,
                            caption="‚úÖ –û—à–∏–±–∫–∞ 1 —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞", url='https://t.me/send?start=IVufKXTbCfU1')],
                                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_add_friend')]
                            ])
                        )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                # –î–ª—è AF Quick Link –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                max_images_to_send = min(3, len(screenshot_paths))
                for i, path in enumerate(screenshot_paths[1:max_images_to_send], 2):
                    with open(path, 'rb') as photo:
                        await update.message.reply_photo(
                            photo=photo,
                            caption=f"‚úÖ –û—à–∏–±–∫–∞ {i} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!"
                        )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                for path in screenshot_paths:
                    os.unlink(path)
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
                await update.message.reply_text(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_add_friend')]
                    ])
                )
            
            finally:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                try:
                    await retry_telegram_request(processing_message.delete)
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                del user_states[user_id]
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É
            await update.message.reply_text(
                "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Steam.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_add_friend')]
                ])
            )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Å—Å—ã–ª–∫—É –¥–ª—è FP Classic
    elif user_id in user_states and user_states[user_id] == STATE_WAITING_FOR_FP_CLASSIC_LINK:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É
        if message_text.startswith('http'):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            
            try:
                # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ Friend Page
                screenshot_path = await create_friend_page_screenshot(message_text)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                if screenshot_path:
                    with open(screenshot_path, 'rb') as photo:
                        await update.message.reply_photo(
                            photo=photo,
                            caption="‚úÖ Friend Page —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞", url='https://t.me/send?start=IVufKXTbCfU1')],
                                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_friend_page')]
                            ])
                        )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if screenshot_path:
                    os.unlink(screenshot_path)
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Friend Page: {e}")
                await update.message.reply_text(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_friend_page')]
                    ])
                )
            
            finally:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                try:
                    await retry_telegram_request(processing_message.delete)
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                del user_states[user_id]
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É
            await update.message.reply_text(
                "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_friend_page')]
                ])
            )
    # Add this condition in the handle_message function where other state checks are
    elif user_id in user_states and user_states[user_id] == STATE_WAITING_FOR_CS2_CODE_NOT_FOUND_LINK:
        # Check if the message is a valid URL
        if not message_text.startswith('http'):
            await update.message.reply_text(
                "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Steam.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_cs2_code')]
                ])
            )
            return
    
        processing_message = await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é CS2 Code Not Found...")
        
        try:
            from temp_functions import create_cs2_code_not_found
    
            # Pass the actual message text (URL) instead of the state
            result_path = await create_cs2_code_not_found(message_text)
    
            if result_path and os.path.exists(result_path):
                with open(result_path, 'rb') as photo:
                    await update.message.reply_photo(
                        photo=photo,
                        caption="‚úÖ CS2 Code Not Found —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞", url='https://t.me/send?start=IVufKXTbCfU1')],
                            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_cs2_code')]
                        ])
                    )
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(result_path)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å CS2 Code Not Found. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_cs2_code')]
                    ])
                )
    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CS2 Code Not Found: {e}")
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_cs2_code')]
                ])
            )
    
        finally:
            await processing_message.delete()
            user_states.pop(user_id, None)
    
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Å—Å—ã–ª–∫—É –¥–ª—è FP Region Error
    elif user_id in user_states and user_states[user_id] == STATE_WAITING_FOR_FP_REGION_ERROR_LINK:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É
        if message_text.startswith('http'):
            processing_message = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            
            try:
                screenshot_path = await create_fp_region_error(message_text)
                
                if screenshot_path and os.path.exists(screenshot_path):
                    with open(screenshot_path, 'rb') as photo:
                        await update.message.reply_photo(
                            photo=photo,
                            caption="‚úÖ Friend Page Region Error —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞", url='https://t.me/send?start=IVufKXTbCfU1')],
                                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_friend_page')]
                            ])
                        )
                    os.unlink(screenshot_path)
                else:
                    raise Exception("Failed to generate screenshot")
                    
            except Exception as e:
                logging.error(f"Error creating Region Error screenshot: {str(e)}")
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_friend_page')]
                    ])
                )
            
            finally:
                await processing_message.delete()
                del user_states[user_id]
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É
            await update.message.reply_text(
                "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_friend_page')]
                ])
            )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Friend Page —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Steam
async def create_friend_page_screenshot(profile_url):
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –≤ headless —Ä–µ–∂–∏–º–µ
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--window-size=1920,1080")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è
        driver.get(profile_url)
        
        # –î–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
        time.sleep(3)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ div playerAvatarAutoSizeInner)
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ div playerAvatarAutoSizeInner
            avatar_elements = driver.find_elements("css selector", ".playerAvatarAutoSizeInner img")
            if len(avatar_elements) >= 2:
                # –ë–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                avatar_url = avatar_elements[1].get_attribute("src")
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                avatar_element = driver.find_element("css selector", ".profile_avatar_frame img")
                avatar_url = avatar_element.get_attribute("src")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
            avatar_url = None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            name_element = driver.find_element("css selector", ".actual_persona_name")
            username = name_element.text
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏: {e}")
            username = "Unknown User"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π 10-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¥—Ä—É–≥–∞ (–∫–∞–∫ –Ω–∞ –≤—Ç–æ—Ä–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
        import random
        friend_code = ''.join([str(random.randint(0, 9)) for _ in range(10)])
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω Friend Page
        template_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "friend.png")
        template_img = Image.open(template_path)
        
        # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ —à–∞–±–ª–æ–Ω –∫–∞–∫ –¥–≤–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∫–∏
        if avatar_url:
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä
                import requests
                avatar_response = requests.get(avatar_url, stream=True)
                avatar_response.raise_for_status()
                avatar_img = Image.open(io.BytesIO(avatar_response.content))
                
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∞–≤–∞—Ç–∞—Ä–∞ –¥–æ 37x37 –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
                avatar_img_small = avatar_img.resize((37, 37), Image.LANCZOS)
                
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∞–≤–∞—Ç–∞—Ä–∞ –¥–æ 70x70 –¥–ª—è –±–æ–ª—å—à–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
                avatar_img_large = avatar_img.resize((70, 70), Image.LANCZOS)
                
                # –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –±–æ–ª—å—à–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏ (402, 64), —Ä–∞–∑–º–µ—Ä 70x70
                # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –º–∞–ª–µ–Ω—å–∫–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏ (1386, 5), —Ä–∞–∑–º–µ—Ä 37x37
                avatar_position_large = (376, 135)  # –ë–æ–ª—å—à–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ —É–≥–ª–∞)
                avatar_position_small = (1386, 5)  # –ú–∞–ª–µ–Ω—å–∫–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ —É–≥–ª–∞)
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä—ã –≤ —à–∞–±–ª–æ–Ω –±–µ–∑ –º–∞—Å–∫–∏ (–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ)
                template_img.paste(avatar_img_large, avatar_position_large)
                template_img.paste(avatar_img_small, avatar_position_small)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–¥ –¥—Ä—É–≥–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        draw = ImageDraw.Draw(template_img)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        try:
            from PIL import ImageFont
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à—Ä–∏—Ñ—Ç Arial, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                # –ü—É—Ç–∏ –∫ —à—Ä–∏—Ñ—Ç–∞–º –≤ —Ä–∞–∑–Ω—ã—Ö –û–°
                font_paths = [
                    os.path.join(os.path.dirname(os.path.abspath(__file__)), "arial.ttf"),
                    "C:\\Windows\\Fonts\\arial.ttf",
                    "/usr/share/fonts/truetype/msttcorefonts/Arial.ttf"
                ]
                
                font = None
                for path in font_paths:
                    if os.path.exists(path):
                        font = ImageFont.truetype(path, 20)
                        break
                
                if font is None:
                    font = ImageFont.load_default()
            except Exception:
                font = ImageFont.load_default()
            
            # –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∞–ª–æ –∏–º–µ–Ω–∏)
            name_position = (462, 146)  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            draw.text(name_position, username, fill="white", font=font)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –º–µ–ª–∫–∏–º —à—Ä–∏—Ñ—Ç–æ–º —Ä—è–¥–æ–º —Å –º–∞–ª–µ–Ω—å–∫–æ–π –∞–≤–∞—Ç–∞—Ä–∫–æ–π
            # –ö–æ–Ω–µ—Ü –∏–º–µ–Ω–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö (1353, 18)
            small_font = font
            try:
                for path in font_paths:
                    if os.path.exists(path):
                        small_font = ImageFont.truetype(path, 12)  # –ú–µ–ª–∫–∏–π —à—Ä–∏—Ñ—Ç
                        break
            except Exception:
                pass
            
            # –í—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–æ–Ω–µ—Ü –∏–º–µ–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
            try:
                if hasattr(small_font, 'getbbox'):
                    text_width = small_font.getbbox(username)[2]  # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
                elif hasattr(small_font, 'getsize'):
                    text_width = small_font.getsize(username)[0]  # –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥
                else:
                    text_width = len(username) * 6  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–º–µ–Ω–∏ —Ä—è–¥–æ–º —Å –º–∞–ª–µ–Ω—å–∫–æ–π –∞–≤–∞—Ç–∞—Ä–∫–æ–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                small_name_position = (1353 - text_width, 16)  # –ü–æ–∑–∏—Ü–∏—è —Ä—è–¥–æ–º —Å –º–∞–ª–µ–Ω—å–∫–æ–π –∞–≤–∞—Ç–∞—Ä–∫–æ–π
            except Exception:
                small_name_position = (1320, 5)  # –ó–∞–ø–∞—Å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            draw.text(small_name_position, username, fill="white", font=small_font)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –¥—Ä—É–≥–∞ –≤ –ø–æ–ª–µ Your Friend Code
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∫–æ–¥–∞ –¥—Ä—É–≥–∞
            code_font = font
            try:
                for path in font_paths:
                    if os.path.exists(path):
                        code_font = ImageFont.truetype(path, 36)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –∫–æ–¥–∞ –¥—Ä—É–≥–∞
                        break
            except Exception:
                pass
            
            # –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –∫–æ–¥–∞ –¥—Ä—É–≥–∞ (—Ü–µ–Ω—Ç—Ä –ø–æ–ª—è Your Friend Code –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö 913, 362)
            # –í—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
            try:
                if hasattr(code_font, 'getbbox'):
                    code_width = code_font.getbbox(friend_code)[2]  # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
                elif hasattr(code_font, 'getsize'):
                    code_width = code_font.getsize(friend_code)[0]  # –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥
                else:
                    code_width = len(friend_code) * 12  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –∫—Ä—É–ø–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
                    #913
                code_position = (660, 362 - 15)  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–æ–¥, –Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
            except Exception:
                code_position = (863, 362 - 15)  # –ó–∞–ø–∞—Å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            draw.text(code_position, friend_code, fill="white", font=code_font)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –ø–æ–ª–µ Quick Invite
            # –û–±—Ä–µ–∑–∞–µ–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
            max_link_length = 40
            display_url = profile_url if len(profile_url) <= max_link_length else profile_url[:max_link_length] + '...'
            # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –±–ª–æ–∫–µ Quick Invite (—Ü–µ–Ω—Ç—Ä –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö 913, 650)
            # –í—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
            try:
                if hasattr(font, 'getbbox'):
                    url_width = font.getbbox(display_url)[2]  # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
                elif hasattr(font, 'getsize'):
                    url_width = font.getsize(display_url)[0]  # –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥
                else:
                    url_width = len(display_url) * 8  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                invite_position = (660, 650 - 5)  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            except Exception:
                invite_position = (660, 650 - 10)  # –ó–∞–ø–∞—Å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            draw.text(invite_position, display_url, fill="white", font=font)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_file:
            template_img.save(temp_file, format='PNG')
            return temp_file.name
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Friend Page: {e}")
        return None
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
        driver.quit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ Steam —Å –Ω–∞–ª–æ–∂–µ–Ω–∏–µ–º –æ—à–∏–±–æ–∫
async def create_steam_screenshot(profile_url, is_quick_link=False):
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –≤ headless —Ä–µ–∂–∏–º–µ
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--window-size=1920,1080")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL
        driver.get(profile_url)
        
        # –î–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
        time.sleep(3)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot = driver.get_screenshot_as_png()
        img = Image.open(io.BytesIO(screenshot))
        
        # –ó–∞—Ç–µ–º–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        enhancer = ImageEnhance.Brightness(img)
        darkened_img = enhancer.enhance(0.7)  # –£–º–µ–Ω—å—à–∞–µ–º —è—Ä–∫–æ—Å—Ç—å –Ω–∞ 30%
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
        error_images = []
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (4 –¥–ª—è quick link, 3 –¥–ª—è classic)
        max_images = 4 if is_quick_link else 3
        
        for i in range(1, max_images + 1):
            error_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), f"{i}.png")
            if os.path.exists(error_path):
                error_img = Image.open(error_path)
                # –°—Ä–∞–∑—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ RGBA –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –Ω–∞–ª–æ–∂–µ–Ω–∏—è
                if error_img.mode != 'RGBA':
                    error_img = error_img.convert('RGBA')
                error_images.append(error_img)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        screenshot_paths = []
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–∏
        for i, error_img in enumerate(error_images):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è quick link (–æ–Ω–æ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ)
            if is_quick_link and i == 3:
                continue
                
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–∏
            img_with_error = darkened_img.copy()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ—à–∏–±–∫–∏ - –≤—Å–µ –æ—à–∏–±–∫–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É
            position = ((img_with_error.width - error_img.width) // 2, 
                       (img_with_error.height - error_img.height) // 2)
            
            # –ù–∞–∫–ª–∞–¥—ã–µ–º –æ—à–∏–±–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img_with_error.paste(error_img, position, error_img)
            
            # –î–ª—è AF Quick Link –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 4.png –ø–æ–≤–µ—Ä—Ö –∫–∞–∂–¥–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
            if is_quick_link and len(error_images) >= 4:
                # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 4.png (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ —Å–ø–∏—Å–∫–µ)
                top_error_img = error_images[3]
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 4.png, —á—Ç–æ–±—ã –æ–Ω–æ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–ª–æ—Å—å –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ
                resized_top_img = top_error_img.resize((img_with_error.width, top_error_img.height), Image.LANCZOS)
                # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –µ–≥–æ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (x=0, y=0)
                img_with_error.paste(resized_top_img, (0, 0), resized_top_img)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_file:
                img_with_error.save(temp_file, format='PNG')
                screenshot_paths.append(temp_file.name)
        
        return screenshot_paths
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
        driver.quit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ—à–∏–±–∫–∏ Wanmei —Å ID –º–∞–º–æ–Ω—Ç–∞
async def create_wanmei_error_screenshot(mammont_id):
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω Wanmei Error
        template_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "wanmei.png")
        template_img = Image.open(template_path)
        
        # –î–æ–±–∞–≤–ª—è–µ–º ID –º–∞–º–æ–Ω—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        draw = ImageDraw.Draw(template_img)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à—Ä–∏—Ñ—Ç Arial, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        try:
            font_paths = [
                os.path.join(os.path.dirname(os.path.abspath(__file__)), "arial.ttf"),
                "C:\\Windows\\Fonts\\arial.ttf",
                "/usr/share/fonts/truetype/msttcorefonts/Arial.ttf"
            ]
            
            font = None
            for path in font_paths:
                if os.path.exists(path):
                    font = ImageFont.truetype(path, 20)  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è ID
                    break
            
            if font is None:
                font = ImageFont.load_default()
        except Exception:
            font = ImageFont.load_default()
        
        # –ü–æ–∑–∏—Ü–∏—è –¥–ª—è ID –º–∞–º–æ–Ω—Ç–∞ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 401, 176)
        id_position = (401, 176)
        draw.text(id_position, mammont_id, fill="white", font=font)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_file:
            template_img.save(temp_file, format='PNG')
            return temp_file.name
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Wanmei Error: {e}")
        return None

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler((filters.TEXT | filters.PHOTO) & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()